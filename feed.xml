<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <generator uri="https://gohugo.io/" version="0.100.1">Hugo</generator>
    <title>七転び八起き</title>
            <link href="https://kensei18.github.io/" rel="alternate" type="text/html" title="HTML" />
            <link href="https://kensei18.github.io/feed.xml" rel="self" type="application/atom+xml" title="Atom" />
    <updated>2022-06-21T23:29:54+09:00</updated>
    <id>https://kensei18.github.io/</id>
        <entry>
            <title>Reactの周辺</title>
            <link href="https://kensei18.github.io/posts/20220621/" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://kensei18.github.io/posts/20220621/</id>
            <published>2022-06-21T23:11:28+09:00</published>
            <updated>2022-06-21T23:11:28+09:00</updated>
            <content type="html">
                &lt;p&gt;VueのアプリをNext.jsに置き換えようとしているけど、Vueと比較するとReact/Next.js関連のドキュメントはかなり簡単に見つかる。Firebase Authを導入するのとかも、Vueだと普通にFirebase SDKのドキュメントを読んで自分なりに組み込んだような記憶があるけど、Next.jsに関してはNext.jsの公式ドキュメントにFirebase Auth導入に関するリンクが載っていて、さらにそこに飛んだら普通に&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://github.com/gladly-team/next-firebase-auth&#34;
  
&gt;next-firebase-auth&lt;/a&gt;というライブラリが用意されていた。Vueのエコシステムはめちゃ好きだったけど、直接関連がないライブラリでも、Reactに導入するための丁寧なドキュメントが用意されていることが多いような気がしていて、「あー、これはVueは勝てんわ」ってなってる。&lt;/p&gt;

            </content>   
                                <category scheme="https://kensei18.github.io/tags/react" term="react" label="react" /> 
                                <category scheme="https://kensei18.github.io/tags/next.js" term="next.js" label="next.js" />
        </entry>
        <entry>
            <title>Next.jsのチュートリアル終わった / Monorepo</title>
            <link href="https://kensei18.github.io/posts/20220615/" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://kensei18.github.io/posts/20220615/</id>
            <published>2022-06-15T22:42:41+09:00</published>
            <updated>2022-06-15T22:42:41+09:00</updated>
            <content type="html">
                &lt;p&gt;Next.jsのチュートリアルを一通りやってみた。そのページの表示に必要なファイルだけを分割して取得したり、ビルド時に一回取得しておけば良いデータを使ったPre-renderingなど、React単体では確かに難しいような機能を簡単に使えるのは良いな、と思う反面、業務用アプリケーションのように一画面での操作が多岐にわたるようなアプリの場合は、結局クライアント側で複雑な動作を制御する必要があるのは間違いないので、そのような機能をNext.jsで作り上げるにはどうしたら良いのか、そしてそのような実装では切っても切り離せないステート管理はどうするのか、というところまではチュートリアルでは学ぶことができなかったので、その辺りをもう少し勉強していかないといけないな、と感じている。Railsでキャリアを始めた人間からすると、もちろん思想の違いはかなり大きいとしても、フルスタックフレームワークという点で、Next.jsもここに全てを詰め込みすぎると負債爆発するイメージがあるので、クライアント側でのアプリケーションの描写、という点のためだけに利用して、ビジネスロジック・データアクセス等は別のサービスに置くことは絶対だな、という確認はできた。&lt;/p&gt;
&lt;p&gt;で、&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://engineering.mercari.com/blog/entry/20210817-8f561697cc/&#34;
  
&gt;メルカリShopsのブログ&lt;/a&gt;を読んで以来、それらのサービスはMonorepoで管理したい、という割と強い思いがある。リポジトリ分けると、どこで何をどのように管理しているか、というのが本当にわからなくなる。「人数が増えてきたら、リポジトリ同じだと面倒になる」という話も聞いたことがあるものの、それはリポジトリのルール・ソース分割・CI/CD管理が杜撰なだけで、それらを明確にしておけばメリットの方が大きいような気がする。ちょっと調べてみたら&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://youtu.be/W71BTkUbdqE&#34;
  
&gt;Googleも基本はmonorepo&lt;/a&gt;のよう。メルカリShopsに関しても&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://zenn.dev/cacbahbj/articles/6f4a337e2070ed&#34;
  
&gt;動画&lt;/a&gt;があった。かなり勉強になりそうだし、両方とも週末にでも観たい。&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://github.com/babel/babel/blob/main/doc/design/monorepo.md&#34;
  
&gt;babelのデザイン資料&lt;/a&gt;も読みたい。&lt;/p&gt;

            </content>   
                                <category scheme="https://kensei18.github.io/tags/next.js" term="next.js" label="next.js" /> 
                                <category scheme="https://kensei18.github.io/tags/cicd" term="cicd" label="cicd" /> 
                                <category scheme="https://kensei18.github.io/tags/architecture" term="architecture" label="architecture" />
        </entry>
        <entry>
            <title>Next.js チュートリアル</title>
            <link href="https://kensei18.github.io/posts/20220610/" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://kensei18.github.io/posts/20220610/</id>
            <published>2022-06-10T23:44:11+09:00</published>
            <updated>2022-06-10T23:44:11+09:00</updated>
            <content type="html">
                &lt;p&gt;Vue.jsのフロントエンドをSSRで作り直すことを検討して、&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://nextjs.org/learn/foundations/about-nextjs&#34;
  
&gt;Next.jsのチュートリアル&lt;/a&gt;を進め始めた。Vue.jsでのアプリ開発経験があって、Reactのチュートリアルくらいはやったことがある、くらいの人間からすると、仮想DOMの基本の復習にもなり、Reactの簡単な復習にもなり、Next.jsのようなSSRフレームワークの触りを知ることができるという意味で、かなり出来の良いチュートリアルだな、と感じた。&lt;/p&gt;
&lt;p&gt;あと、&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://nextjs.org/showcase&#34;
  
&gt;Showcase&lt;/a&gt;を見ると、めちゃくちゃ有名なアプリケーションがひたすら紹介されていて、Vue.js界隈ではなかなか見ることができなかった景色でテンションが上がる。&lt;/p&gt;
&lt;p&gt;ほぼ間違いなく使うことになると思うけど、もう少し勉強と検討が必要そう。&lt;/p&gt;

            </content>   
                                <category scheme="https://kensei18.github.io/tags/next.js" term="next.js" label="next.js" />
        </entry>
        <entry>
            <title>マイクロサービスと既存テスト</title>
            <link href="https://kensei18.github.io/posts/20220608/" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://kensei18.github.io/posts/20220608/</id>
            <published>2022-06-08T22:50:29+09:00</published>
            <updated>2022-06-08T22:50:29+09:00</updated>
            <content type="html">
                &lt;p&gt;モノリスの既存機能をマイクロサービス化するにあたって、既存テストの一部のデータ取得をモックしたりしてる。Ruby on RailsのようなMVCがガッチリ絡み合っているようなフレームワークだと、確かにサービスが大きくなってきたときにその密結合が悪影響を及ぼすけど、E2Eテストはかなりやりやすかったんだなと感じている。&lt;/p&gt;
&lt;p&gt;マイクロサービスじゃなくても、フロントエンドとバックエンドが明確に分けられているような最近のアーキテクチャでは、E2Eテストをどう考えるのが正解なんだろう？個別にインテグレーションテストするのはもちろんだが、それで十分なんだろうか？意外と調べても簡単には出てこない（特に日本語だと）ので、そのうち時間をとって海外のブログとか漁ってみたい。&lt;/p&gt;

            </content>   
                                <category scheme="https://kensei18.github.io/tags/microservices" term="microservices" label="microservices" /> 
                                <category scheme="https://kensei18.github.io/tags/software-testing" term="software-testing" label="software testing" />
        </entry>
        <entry>
            <title>Reactの状態管理調査</title>
            <link href="https://kensei18.github.io/posts/20220606/" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://kensei18.github.io/posts/20220606/</id>
            <published>2022-06-06T23:23:26+09:00</published>
            <updated>2022-06-06T23:23:26+09:00</updated>
            <content type="html">
                &lt;p&gt;Reactはほとんど触らず、Vue.jsしか開発したことがなかったけど、React/Next.jsで開発する必要が出てきそうなので調査。とりあえずReactの状態管理の手法を知りたかったところ、&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://blog.uhy.ooo/entry/2021-07-24/react-state-management/?utm_source=pocket_mylist&#34;
  
&gt;こちらの記事&lt;/a&gt;を見つけたので読んでみた。&lt;/p&gt;
&lt;p&gt;VuexはReduxのVue.js版かと思っていたが、もしかしたらちょっと違う？Reduxは分割ができない、的なことが書いてあるけど、これは文字通りファイルが分割できないのか、さまざまなステートが一つのインスタンスに内包されているという意味か、よくわからなかった。とはいえ、Vuexもpiniaも実際のところどうやって状態管理しているのかよくわかっていないので、あまり気にする意味がなさそう。少なくとも、2022年6月現在ではRecoilが比較的新しい状態管理ライブラリとして人気がありそうということがわかった。今後ドキュメントをよく読む必要がありそう。&lt;/p&gt;

            </content>   
                                <category scheme="https://kensei18.github.io/tags/react" term="react" label="react" />
        </entry>
        <entry>
            <title>Nature RemoをMacから操作</title>
            <link href="https://kensei18.github.io/posts/20220605/" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://kensei18.github.io/posts/20220605/</id>
            <published>2022-06-05T22:49:51+09:00</published>
            <updated>2022-06-05T22:49:51+09:00</updated>
            <content type="html">
                &lt;p&gt;&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://nature.global/nature-remo/&#34;
  
&gt;Nature Remo&lt;/a&gt;で扇風機をつけたり、部屋の明かりを調整したりするのに、PCを操作しているときに毎回スマホから操作するのめんどくさいな、と思っていたので、良い方法ないかなと探したところ、&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://takemikami.com/2021/02/20/macOSNatureRemo.html&#34;
  
&gt;こちらのブログ&lt;/a&gt;を見つけたので、そのまま試してみた。めちゃ便利。Automatorもスクリプトエディタも使ったことなかったけど、shell script書くだけで簡単に自動化できるし、今後有効活用していきたさある。&lt;/p&gt;
&lt;p&gt;今日はようやく会社の定款とかを読んだ。これ全部1人でやるのはとてもじゃないけど無理やな。&lt;/p&gt;

            </content>   
                                <category scheme="https://kensei18.github.io/tags/mac" term="mac" label="mac" />
        </entry>
        <entry>
            <title>緑内障 &amp; デザインの基礎の基礎の勉強</title>
            <link href="https://kensei18.github.io/posts/20220604/" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://kensei18.github.io/posts/20220604/</id>
            <published>2022-06-04T21:26:55+09:00</published>
            <updated>2022-06-04T21:26:55+09:00</updated>
            <content type="html">
                &lt;p&gt;今のメガネが傷だらけだったので、いい加減新調しないとと思い、眼科に行ってメガネの処方箋を作るための検査をしたところ、緑内障の疑いがあることが判明し、そのまま力内容の検査も併せて行った。結論としては、今は問題ないものの、特に右目の視神経が弱いようで、将来的に緑内障になる可能性があるとのこと。ただし、早期発見できれば進行を遅らせるような治療もできるので、今気が付いて良かったらしい。今後は年に一回くらいの頻度で検査を行う方が良いと助言をいただいた。たまたまだけど、気がつけて本当によかった。&lt;/p&gt;
&lt;p&gt;今日は『&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;www.amazon.co.jp/dp/429500233X&#34;
  
&gt;エンジニアのための理論でわかるデザイン入門&lt;/a&gt;』の色のところまで読み終わった。作っているアプリのメインのカラーを何にしようか明確な方針が無かったけど、なんとなく「クールだけどライト」みたいなコンセプトで考えるのが良さそうだし、医療系のサイトは割と寒色のものが多いから、それに倣うのが良さそう。Figmaの使い方を勉強し始めないと。&lt;/p&gt;

            </content>   
                                <category scheme="https://kensei18.github.io/tags/web-design" term="web-design" label="web design" />
        </entry>
        <entry>
            <title>ブログ開設した</title>
            <link href="https://kensei18.github.io/posts/20220603/" rel="alternate" type="text/html"  hreflang="en" />
            <id>https://kensei18.github.io/posts/20220603/</id>
            <published>2022-06-04T00:59:05+09:00</published>
            <updated>2022-06-04T00:59:05+09:00</updated>
            <content type="html">
                &lt;p&gt;自分の考えていることを書き出したりしたら、頭の中を整理できるかなと思い立って開設してみた。なんとなくアウトプットする先があった方が続くかなと思っているけど、続く自信は全くない。ローカル+Githubで完結させた方が楽だと思ったので、Hugoで作った。&lt;/p&gt;
&lt;p&gt;書く内容は新しく学んだ技術のこととか、体系だっていないつぶやきとかかな？&lt;/p&gt;
&lt;p&gt;今の悩みは、&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://vuetifyjs.com&#34;
  
&gt;Vuetify&lt;/a&gt;が一向にVue3に対応できる兆しがないため、自分の作っているアプリケーションをVueからReactに移すべきか、ということ。Vuetify3のリリースに関する&lt;a
  class=&#34;gblog-markdown__link&#34;
  href=&#34;https://github.com/vuetifyjs/vuetify/issues/14984&#34;
  
&gt;issue&lt;/a&gt;を読む限り、あんまり建設的に議論が進んでなさそう。。。Reactの基本的な書き方はなんとなく知っているけど、関連ライブラリとか状態管理のベストプラクティスとかもうちょっと調べないと。。。&lt;/p&gt;

            </content>  
        </entry>
</feed>
